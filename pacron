#! /bin/bash

set -euo pipefail

usage() {
    echo 'Use pacman --help for more information'
    echo
    echo "usage: $execname [options]"
    echo
    echo "PACman Run ON, the pacman hook wrapper | www.github.com/kevlar1818/pacron"
    echo
    echo "Options:"
    echo "  -h    show this help text and exit"
    echo "  -e    edit $pacrontab"
    echo
    echo "More configuration settings can be found in $pacronconf"
}

error() {
    echo "$execname: $1" >&2
    exit 1
}

run_cmds() {
    for cmd in "$@"; do
        [ -n "$verbose" ] && echo "Running '$cmd'..."
        eval "$cmd"
        ret=$?
        if [ $ret -ne 0 ]; then
            exit $ret
        fi
    done
}

trap "exit 1" SIGINT

execname=$(basename "$0")

# set default variables before config
verbose=
aur_helper=

pacrontab=$HOME/.config/pacron/pacrontab
pacronconf=$HOME/.config/pacron/pacron.conf
if [ -r "$pacronconf" ]; then
    # shellcheck disable=SC1090
    source "$pacronconf"
else
    echo "WARNING: $pacronconf not found. Using default settings."
fi

if ! type pacman &> /dev/null; then
    error 'pacman not found'
fi

if [ -n "$aur_helper" ] && ! type "$aur_helper" &> /dev/null; then
    error "'$aur_helper' not found"
fi
[ -n "$verbose" ] && echo "AUR helper: $aur_helper"

[ -f "$pacrontab" ] || error "File $pacrontab not found"

if [ "$*" == "-e" ]; then
    $EDITOR "$pacrontab"
    exit 0
fi

while getopts ":h" opt; do
    case $opt in
        h)
            usage
            exit 0
            ;;
    esac
done

pre=()
post=()
ln=1
while read -r line; do
    [[ "$line" == "#*" ]] && continue
    pattern=$(echo "$line" | awk '{print $1}')
    options=$1
    # $pattern must be unquoted for bash glob matching to work
    # shellcheck disable=SC2053
    if [[ "$options" == $pattern ]]; then
        [ -n "$verbose" ] && echo -e "$pacrontab line $ln: '$options' matched '$pattern'"
        when=$(echo "$line" | awk '{print $2}')
        cmd=$(echo "$line" | awk '{for(i=1;i<3;i++) $i="";print}' | sed 's/^ *//')
        case $when in
            before)
                pre+=("$cmd")
                ;;
            after)
                post+=("$cmd")
                ;;
            *)
                echo "Invalid timing '$when' on line $ln of $pacrontab" >&2
                ;;
        esac
    fi
    ((ln++))
done < "$pacrontab"

run_cmds "${pre[@]}"

if [ -n "$aur_helper" ]; then
    [ -n "$verbose" ] && echo "calling: '$aur_helper $*'..."
    $aur_helper "$@"
    aur_helper_exit=$?
fi
if [ $aur_helper_exit -eq 5 ] || [ -z "$aur_helper" ]; then
    if [ $aur_helper_exit -eq 5 ]; then
        echo -ne "\x1b[1A\x1b[2K" # overwrite last line of output (aur_helper parse fail)
    fi
    [ -n "$verbose" ] && echo "calling: 'pacman $*'..."
    pacman "$@"
fi

run_cmds "${post[@]}"
